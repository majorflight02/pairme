package com.echolabstech.db;

import java.util.ArrayList;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQueryBuilder;
import android.util.SparseArray;

import com.readystatesoftware.sqliteasset.SQLiteAssetHelper;

public class BeerPairingsDb extends SQLiteAssetHelper {

	
	private static final String DATABASE_NAME = "beer_pairingsdb";
	private static final int DATABASE_VERSION = 1;
	
	private String TBL_BEERENTRIES = "beer_entries";
	private String COL_ID = "id";
	private String COL_BEERNAME = "name";
	private String COL_TYPE = "type";
	private String COL_HEAD = "head";
	private String COL_AROMA = "aroma";
	private String COL_ATTACK = "taste_attack";
	private String COL_PRIMARY = "taste_primary";
	private String COL_SECONDARY = "taste_secondary";
	private String COL_TERTIARY = "taste_tertiary";
	private String COL_FINAL = "taste_final";
	private String COL_AFTERTASTE = "taste_aftertaste";
	private String COL_BODY = "body";
	
	public BeerPairingsDb(Context context) 
	{
		super(context, DATABASE_NAME, null, DATABASE_VERSION);
		
		// you can use an alternate constructor to specify a database location 
		// (such as a folder on the sd card)
		// you must ensure that this folder is available and you have permission
		// to write to it
		//super(context, DATABASE_NAME, context.getExternalFilesDir(null).getAbsolutePath(), null, DATABASE_VERSION);
	}//BeerPairingsDb

	public ArrayList<String> getBeerRecordById(int id)
	{
		SQLiteDatabase db = getReadableDatabase();
		SQLiteQueryBuilder qb = new SQLiteQueryBuilder();

		String [] sqlSelect = {COL_ID, COL_BEERNAME, COL_TYPE, COL_HEAD, COL_AROMA, COL_ATTACK, COL_PRIMARY, COL_SECONDARY,
				COL_TERTIARY, COL_FINAL, COL_AFTERTASTE, COL_BODY}; 
		String sqlTables = TBL_BEERENTRIES;
		String selection = COL_ID+" = "+id;
		ArrayList<String> record = new ArrayList<String>();
		
		qb.setTables(sqlTables);
		Cursor c = qb.query(db, sqlSelect, selection, null, null, null, null);

		c.moveToFirst();
		while (record.size() < c.getColumnCount())
		{
			record.add(c.getString(c.getColumnIndex(COL_ID)));
			record.add(c.getString(c.getColumnIndex(COL_BEERNAME)));
			record.add(c.getString(c.getColumnIndex(COL_TYPE)));
			record.add(c.getString(c.getColumnIndex(COL_HEAD)));
			record.add(c.getString(c.getColumnIndex(COL_AROMA)));
			record.add(c.getString(c.getColumnIndex(COL_ATTACK)));
			record.add(c.getString(c.getColumnIndex(COL_PRIMARY)));
			record.add(c.getString(c.getColumnIndex(COL_SECONDARY)));
			record.add(c.getString(c.getColumnIndex(COL_TERTIARY)));
			record.add(c.getString(c.getColumnIndex(COL_FINAL)));
			record.add(c.getString(c.getColumnIndex(COL_AFTERTASTE)));
			record.add(c.getString(c.getColumnIndex(COL_BODY)));
		}//while all columns have not be accounted for
		
		return record;
	}//getBeerRecordByName

}
